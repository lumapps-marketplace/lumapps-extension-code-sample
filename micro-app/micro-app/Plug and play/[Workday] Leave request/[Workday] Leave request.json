[
  {
    "id": "83a70392-5657-452f-8236-67b2bf6ec1ed",
    "name": "generatedaysarray",
    "code": "generatedaysarray",
    "position": {
      "x": 1392,
      "y": 0
    },
    "links": [
      {
        "targetId": "581cbc52-8c67-4bca-b6f8-91771187bbf9"
      }
    ],
    "type": "function",
    "settings": {
      "language": "javascript",
      "source": "/**\n * Process data from the execution context in order to either reformat or create new data.\n * @param {Object} executionContext The execution context as a freezed object, you cannot update it directly.\n * @returns {Object} The result of your data processing which will be available in the next execution context.\n */\nfunction main(executionContext) {\n    let output;\n\n    const { startDate, startDatePeriod, endDate, endDatePeriod, typeofleave } = executionContext.actions.ac.inputs;\n/*\n    const startDate = \"2024-12-04\";\n    const endDate = \"2024-12-04\";\n    const endDatePeriod = \"T18:00:00.000Z\";\n    const startDatePeriod = \"T08:00:00.000Z\";\n    const typeofleave = \"e7363fe834bd4c2883d36652ac6c979a\";\n*/\n    // Parse the dates\n    const startDateTime = new Date(`${startDate}${startDatePeriod}`);\n    const endDateTime = new Date(`${endDate}${endDatePeriod}`);\n\n    // Check if the start and end dates are on different days\n    const msPerDay = 1000 * 60 * 60 * 24;\n    const isSameDay = startDateTime.toDateString() === endDateTime.toDateString();\n\n    let totalRequestedHours = 0;\n    let days = []; // To store the detailed information for each day\n\n    if (!isSameDay) {\n        // If the start and end date are different\n        const fullDays = Math.max(0, Math.floor((endDateTime - startDateTime) / msPerDay) - 1);\n        const hoursFullDays = fullDays * 8; // Each full workday is 8 hours (4 in the morning + 4 in the afternoon)\n\n        // Calculate hoursFirstDay\n        let hoursFirstDay = 0;\n        if (startDatePeriod === \"T08:00:00.000Z\") {\n            hoursFirstDay = 8;\n            days.push({\n                start: `${startDate}T08:00:00.000Z`,\n                date: `${startDate}`,\n                end: `${startDate}T18:00:00.000Z`,\n                dailyQuantity: 8,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        } else if (startDatePeriod === \"T14:00:00.000Z\") {\n            hoursFirstDay = 4;\n            days.push({\n                start: `${startDate}T14:00:00.000Z`,\n                date: `${startDate}`,\n                end: `${startDate}T18:00:00.000Z`,\n                dailyQuantity: 4,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        }\n\n        // Calculate hoursLastDay\n        let hoursLastDay = 0;\n        if (endDatePeriod === \"T12:00:00.000Z\") {\n            hoursLastDay = 4;\n            days.push({\n                start: `${endDate}T08:00:00.000Z`,\n                date: `${endDate}`,\n                end: `${endDate}T12:00:00.000Z`,\n                dailyQuantity: 4,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        } else if (endDatePeriod === \"T18:00:00.000Z\") {\n            hoursLastDay = 8;\n            days.push({\n                start: `${endDate}T08:00:00.000Z`,\n                date: `${endDate}`,\n                end: `${endDate}T18:00:00.000Z`,\n                dailyQuantity: 8,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        }\n\n        // Add the full days in between\n        for (let i = 1; i <= fullDays; i++) {\n            const middleDay = new Date(startDateTime);\n            middleDay.setDate(startDateTime.getDate() + i);\n            const middleDate = middleDay.toISOString().split(\"T\")[0];\n\n            days.push({\n                start: `${middleDate}T08:00:00.000Z`,\n                date: middleDate,\n                end: `${middleDate}T18:00:00.000Z`,\n                dailyQuantity: 8,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        }\n\n        totalRequestedHours = hoursLastDay + hoursFirstDay + hoursFullDays;\n    } else {\n        // If the start and end date are the same\n        if (startDatePeriod === \"T08:00:00.000Z\" && endDatePeriod === \"T18:00:00.000Z\") {\n            totalRequestedHours = 8;\n            days.push({\n                start: `${startDate}T08:00:00.000Z`,\n                date: `${startDate}`,\n                end: `${startDate}T18:00:00.000Z`,\n                dailyQuantity: 8,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        } else if (startDatePeriod === \"T14:00:00.000Z\" && endDatePeriod === \"T18:00:00.000Z\") {\n            totalRequestedHours = 4;\n            days.push({\n                start: `${startDate}T14:00:00.000Z`,\n                date: `${startDate}`,\n                end: `${startDate}T18:00:00.000Z`,\n                dailyQuantity: 4,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        } else if (startDatePeriod === \"T08:00:00.000Z\" && endDatePeriod === \"T12:00:00.000Z\") {\n            totalRequestedHours = 4;\n            days.push({\n                start: `${startDate}T08:00:00.000Z`,\n                date: `${startDate}`,\n                end: `${startDate}T12:00:00.000Z`,\n                dailyQuantity: 4,\n                timeOffType: { descriptor: typeofleave, id: typeofleave }\n            });\n        } else {\n            // Error case: start period is after end period\n            output = {\n                success: \"false\",\n                message: \"Error: start date period cannot be after end date period.\"\n            };\n            return output;\n        }\n    }\n\n    // Access the timeoffdetails array from the mapping object\n    // Accéder aux détails des congés\n    const timeoffdetails = executionContext.actions.mapping.output.timeoffdetails;\n\n    // Rechercher le plan correspondant à l'ID du type de congé\n    const absencePlan = timeoffdetails.find(detail => detail.timeofftypeid === typeofleave);\n\n    if (absencePlan) {\n        // Convertir la quantité en un nombre (float)\n        const availableHours = parseFloat(absencePlan.quantity);\n\n        // Vérifier si les heures demandées sont disponibles\n        if (totalRequestedHours <= availableHours) {\n\t\t\toutput = days;\n        } else {\n            output = {\n                success: \"false\",\n                message: `Insufficient balance in '${absencePlan.timeofftypedescriptor}'. Requested: ${totalRequestedHours} hours, Available: ${availableHours} hours.`,\n                days\n            };\n        }\n    } else {\n        output = {\n            success: \"false\",\n            message: `Absence plan with ID '${typeofleave}' not found.`,\n            days\n        };\n    }\n\n    return output;\n\n}"
    }
  },
  {
    "id": "752fb4d1-6386-42e8-9687-c76353fd08f1",
    "name": "mapping",
    "code": "mapping",
    "position": {
      "x": 816,
      "y": 0
    },
    "links": [
      {
        "targetId": "8c82a11e-9129-4ddc-ab63-05b3f24688ef"
      }
    ],
    "type": "function",
    "settings": {
      "language": "javascript",
      "source": "/**\n * Process data from the execution context in order to either reformat or create new data.\n * @param {Object} executionContext The execution context as a freezed object, you cannot update it directly.\n * @returns {Object} The result of your data processing which will be available in the next execution context.\n */\nfunction main(executionContext) {\n    // Declaration of the output variable.\n    let output = {};\n    \n    // Récupération des tableaux nécessaires.\n    const eligibleTimes = executionContext.actions.geteligibletimes.response.body.data || [];\n    const balances = executionContext.actions.getbalances.response.body.data || [];\n\n    // Préparation d'une structure facilitant le mapping.\n    // On extrait les noms des timeoffs disponibles à partir de balances.\n    const availableTimeOffs = {};\n    balances.forEach(item => {\n        // Extraire les types d'absences regroupées dans `timeoffs` et les nettoyer.\n        const timeoffTypes = item.absencePlan.timeoffs\n            .replace(/^\\(/, '') // Supprime uniquement la première parenthèse ouvrante.\n            .replace(/\\)$/, '') // Supprime uniquement la dernière parenthèse fermante.\n            .split(',') // Sépare les différents descripteurs.\n            .map(descriptor => descriptor.trim()); // Supprime les espaces superflus.\n\n        // Ajouter chaque type d'absence au dictionnaire pour un mapping rapide.\n        timeoffTypes.forEach(type => {\n            availableTimeOffs[type] = {\n                quantity: item.quantity,\n                unit: item.unit.descriptor\n            };\n        });\n    });\n\n\n    // Construction du tableau de sortie.\n    const result = eligibleTimes\n        .filter(timeoff => availableTimeOffs[timeoff.descriptor]) // Filtrer sur les types existants.\n        .map(timeoff => ({\n            timeofftypedescriptor: timeoff.descriptor,\n            quantity: availableTimeOffs[timeoff.descriptor].quantity,\n            unit: availableTimeOffs[timeoff.descriptor].unit,\n            timeofftypeid: timeoff.id\n        }));\n\n    // Assigner le résultat à la sortie.\n    output.timeoffdetails = result;\n\n    // Mandatory: return your output.\n    return output;\n}"
    }
  },
  {
    "id": "dd780c7c-4619-4251-9c16-667dfe748925",
    "name": "geteligibletimes",
    "code": "geteligibletimes",
    "position": {
      "x": 624,
      "y": 0
    },
    "links": [
      {
        "targetId": "752fb4d1-6386-42e8-9687-c76353fd08f1"
      }
    ],
    "type": "api_call",
    "settings": {
      "authentication": {
        "method": "connector",
        "providerType": "workday"
      },
      "endpoint": {
        "httpMethod": "GET",
        "body": "",
        "path": "/api/absenceManagement/v1/lumapps_dpt1/workers/31d94e45d30e100c8878a8f44fca0000/eligibleAbsenceTypes?limit=100",
        "queryParams": [],
        "url": ""
      },
      "providerType": "workday"
    }
  },
  {
    "id": "ce1604b5-1e3a-4b80-9d7a-83b108148ad6",
    "name": "failureleaverequest",
    "code": "failureleaverequest",
    "position": {
      "x": 2628,
      "y": 156
    },
    "links": [],
    "type": "adaptive_card",
    "settings": {
      "template": {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "body": [
          {
            "type": "Container",
            "items": [
              {
                "size": "Default",
                "text": "❌ We had a technical issue trying to create your request. Please contact the support team.",
                "type": "TextBlock",
                "wrap": true,
                "weight": "Bolder",
                "spacing": "Small"
              }
            ],
            "style": "attention"
          }
        ],
        "type": "AdaptiveCard",
        "version": "1.6"
      }
    }
  },
  {
    "id": "2632bf8c-f8ee-41a1-a542-291ab10b98fc",
    "name": "Action 2632bf8c-f8ee-41a1-a542-291ab10b98fc",
    "code": "action_2632_bf_8_c_f_8_ee_41_a_1_a_542_291_ab_10_b_98_fc",
    "position": {
      "x": 2376,
      "y": 48
    },
    "links": [
      {
        "targetId": "bc084e54-1e2f-4e97-87ca-f4c25b324db4",
        "conditions": {
          "combinator": "AND",
          "rulesGroup": [
            {
              "combinator": "OR",
              "id": "6097",
              "rules": [
                {
                  "id": "6098",
                  "leftValue": "${actions.leaverequest.response.status}",
                  "operator": {
                    "operation": "equals",
                    "type": "string",
                    "name": "MICROAPP.FILTER.OPERATION.EQUALS"
                  },
                  "rightValue": "200"
                },
                {
                  "id": "6221",
                  "leftValue": "${actions.leaverequest.response.status}",
                  "operator": {
                    "operation": "equals",
                    "type": "string",
                    "name": "MICROAPP.FILTER.OPERATION.EQUALS"
                  },
                  "rightValue": "201"
                }
              ]
            }
          ]
        }
      },
      {
        "targetId": "ce1604b5-1e3a-4b80-9d7a-83b108148ad6",
        "isFallback": true
      }
    ],
    "type": "router"
  },
  {
    "id": "bc084e54-1e2f-4e97-87ca-f4c25b324db4",
    "name": "success",
    "code": "success",
    "position": {
      "x": 2604,
      "y": -84
    },
    "links": [],
    "type": "adaptive_card",
    "settings": {
      "template": {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "body": [
          {
            "type": "Container",
            "items": [
              {
                "size": "Default",
                "text": "✅ Your request has been submitted.",
                "type": "TextBlock",
                "wrap": true,
                "weight": "Bolder",
                "spacing": "Small"
              }
            ],
            "style": "good"
          }
        ],
        "type": "AdaptiveCard",
        "version": "1.6"
      }
    }
  },
  {
    "id": "688856a1-8364-4390-8a1b-08f647e566d3",
    "name": "leaverequest",
    "code": "leaverequest",
    "position": {
      "x": 1980,
      "y": 60
    },
    "links": [
      {
        "targetId": "2632bf8c-f8ee-41a1-a542-291ab10b98fc"
      }
    ],
    "type": "api_call",
    "settings": {
      "authentication": {
        "method": "connector",
        "providerType": "workday"
      },
      "endpoint": {
        "httpMethod": "POST",
        "body": "{\"days\":${jsonStringify(actions.generatedaysarray.output)}}\r\n",
        "path": "/api/absenceManagement/v1/lumapps_dpt1/workers/${actions.getworker.response.body.id}/requestTimeOff",
        "queryParams": [],
        "url": ""
      },
      "providerType": "workday"
    }
  },
  {
    "id": "92115e41-5981-418f-b49a-c20741a45402",
    "name": "failure",
    "code": "failure",
    "position": {
      "x": 2040,
      "y": -276
    },
    "links": [],
    "type": "adaptive_card",
    "settings": {
      "template": {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "body": [
          {
            "type": "ColumnSet",
            "columns": [
              {
                "type": "Column",
                "items": [
                  {
                    "size": "Large",
                    "text": "Error",
                    "type": "TextBlock",
                    "color": "Attention",
                    "weight": "Bolder",
                    "horizontalAlignment": "Left"
                  }
                ],
                "width": "stretch"
              }
            ]
          },
          {
            "text": "There was an error processing your request. Please review the following details:",
            "type": "TextBlock",
            "wrap": true,
            "margin": "medium"
          },
          {
            "text": "${actions.function.output.message}",
            "type": "TextBlock",
            "wrap": true,
            "color": "Attention",
            "margin": "medium"
          },
          {
            "type": "ActionSet",
            "actions": [
              {
                "data": {
                  "action": "retry"
                },
                "type": "Action.Submit",
                "style": "positive",
                "title": "Retry"
              }
            ],
            "spacing": "Large",
            "horizontalAlignment": "Center"
          }
        ],
        "type": "AdaptiveCard",
        "version": "1.6"
      }
    }
  },
  {
    "id": "581cbc52-8c67-4bca-b6f8-91771187bbf9",
    "name": "Action 581cbc52-8c67-4bca-b6f8-91771187bbf9",
    "code": "action_581_cbc_52_8_c_67_4_bca_b_6_f_8_91771187_bbf_9",
    "position": {
      "x": 1740,
      "y": 12
    },
    "links": [
      {
        "targetId": "688856a1-8364-4390-8a1b-08f647e566d3",
        "isFallback": true
      },
      {
        "targetId": "92115e41-5981-418f-b49a-c20741a45402",
        "conditions": {
          "combinator": "AND",
          "rulesGroup": [
            {
              "combinator": "OR",
              "id": "12042",
              "rules": [
                {
                  "id": "12043",
                  "leftValue": "${actions.generatedaysarray.output.success}",
                  "operator": {
                    "operation": "equals",
                    "type": "string",
                    "name": "MICROAPP.FILTER.OPERATION.EQUALS"
                  },
                  "rightValue": "false"
                }
              ]
            }
          ]
        }
      }
    ],
    "type": "router"
  },
  {
    "id": "8c82a11e-9129-4ddc-ab63-05b3f24688ef",
    "name": "ac",
    "code": "ac",
    "position": {
      "x": 1032,
      "y": 0
    },
    "links": [
      {
        "targetId": "83a70392-5657-452f-8236-67b2bf6ec1ed"
      }
    ],
    "type": "adaptive_card",
    "settings": {
      "template": {
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "body": [
          {
            "type": "ColumnSet",
            "columns": [
              {
                "type": "Column",
                "items": [
                  {
                    "id": "typeofleave",
                    "type": "Input.ChoiceSet",
                    "label": "Type of leave",
                    "choices": [
                      {
                        "$data": "${actions.mapping.output.timeoffdetails}",
                        "title": "${timeofftypedescriptor} (${quantity} ${unit} remaining)",
                        "value": "${timeofftypeid}"
                      }
                    ],
                    "placeholder": "Pick a type of leave"
                  }
                ],
                "style": "emphasis",
                "width": "stretch",
                "borderRadius": "8px"
              }
            ]
          },
          {
            "type": "ColumnSet",
            "columns": [
              {
                "type": "Column",
                "items": [
                  {
                    "id": "startDate",
                    "type": "Input.Date",
                    "label": "From"
                  },
                  {
                    "id": "startDatePeriod",
                    "type": "Input.ChoiceSet",
                    "style": "expanded",
                    "choices": [
                      {
                        "title": "Morning",
                        "value": "T08:00:00.000Z"
                      },
                      {
                        "title": "Afternoon",
                        "value": "T14:00:00.000Z"
                      }
                    ],
                    "placeholder": "Placeholder text"
                  }
                ],
                "width": "stretch"
              },
              {
                "type": "Column",
                "items": [
                  {
                    "id": "endDate",
                    "type": "Input.Date",
                    "label": "To"
                  },
                  {
                    "id": "endDatePeriod",
                    "type": "Input.ChoiceSet",
                    "style": "expanded",
                    "choices": [
                      {
                        "title": "Morning",
                        "value": "T12:00:00.000Z"
                      },
                      {
                        "title": "Afternoon",
                        "value": "T18:00:00.000Z"
                      }
                    ],
                    "placeholder": "Placeholder text"
                  }
                ],
                "width": "stretch"
              }
            ]
          },
          {
            "type": "ActionSet",
            "actions": [
              {
                "data": {
                  "endDate": "${endDate}",
                  "startDate": "${startDate}",
                  "typeofleave": "${typeofleave}",
                  "endDatePeriod": "${endDatePeriod}",
                  "startDatePeriod": "${startDatePeriod}"
                },
                "type": "Action.Execute",
                "style": "positive",
                "title": "Request"
              }
            ]
          }
        ],
        "type": "AdaptiveCard",
        "version": "1.6"
      }
    }
  },
  {
    "id": "909869fb-c387-4a6d-9566-77e909f298c6",
    "name": "getbalances",
    "code": "getbalances",
    "position": {
      "x": 420,
      "y": 0
    },
    "links": [
      {
        "targetId": "dd780c7c-4619-4251-9c16-667dfe748925"
      }
    ],
    "type": "api_call",
    "settings": {
      "authentication": {
        "method": "connector",
        "providerType": "workday"
      },
      "endpoint": {
        "httpMethod": "GET",
        "body": "",
        "path": "/api/absenceManagement/v1/lumapps_dpt1/balances",
        "queryParams": [
          {
            "key": "worker",
            "value": "${actions.getworker.response.body.id}"
          }
        ],
        "url": ""
      },
      "providerType": "workday"
    }
  },
  {
    "id": "c571d507-bfd8-4e83-8fa6-c407a45f8745",
    "name": "getworker",
    "code": "getworker",
    "position": {
      "x": 228,
      "y": 0
    },
    "links": [
      {
        "targetId": "909869fb-c387-4a6d-9566-77e909f298c6"
      }
    ],
    "type": "api_call",
    "settings": {
      "authentication": {
        "method": "connector",
        "providerType": "workday"
      },
      "endpoint": {
        "httpMethod": "GET",
        "body": "",
        "path": "/api/absenceManagement/v1/lumapps_dpt1/workers/me",
        "queryParams": [],
        "url": ""
      },
      "providerType": "workday"
    }
  },
  {
    "id": "d96a7637-3deb-4f8b-bb05-a96be2220981",
    "name": "Start",
    "code": "start",
    "position": {
      "x": 0,
      "y": 0
    },
    "links": [
      {
        "targetId": "c571d507-bfd8-4e83-8fa6-c407a45f8745"
      }
    ],
    "type": "trigger"
  }
]